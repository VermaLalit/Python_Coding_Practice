list1 = [1,2,3,45,56]
print(list1)
# 1. using list slicing
print(list1[::-1])
# 2. using for loop and range()
list2 = []
for i in range(len(list1)-1,-1,-1):
    list2.append(list1[i])
print(list2)
# 3. while loop
n = len(list1)
list3 = []
while n>0:
    list3.append(list1[n-1])
    n -=1
print(list3)
# 4. using function
def reversed_list1(li):
    n = len(li)
    lisst = []
    while n>0 :
        lisst.append(li[n-1])
        n -= 1
    return lisst
lissst = [2,3,4,51]
print(reversed_list1(lissst),"=========")
# 5. using list comprehension
m = [ list1[i] for i in range(len(list1)-1,-1,-1)]
print(m,"============")
# 6. Reverse List Using the Reversed() and Reverse() Built-In Function
list1.reverse()          #Using reversed() we can reverse the list and a list_reverseiterator object is created,
                        # from which we can create a list using list() type casting.
                        # Or, we can also use the list reverse() function to reverse list in place.
print('using reverse()',list1)
print("using reversed()",list(reversed(list1)))
# 7.  Reverse a List Using a Two-Pointer Approach
def reverse_list(lst):
    i = 0
    j = len(lst)-1
    while i<j:
        temp = lst[i]
        lst[i] = lst[j]
        lst[j] = temp
        i += 1
        j -= 1
    return lst
list1 = [34,45,2,21,3,1]
print(reverse_list(list1))

# 8. Reverse a List Using the insert() Function
list1 = [45,34,23,6,43]
list2 = []
for i in list1:
    list2.insert(0,i)
print(list2)
# 9. Reverse a List Using Numpy
import numpy as np
list1 = [56,45,34,65,54]       #Initialize the input list list1 Convert list1 to a 1D numpy array 
                                # using np.array(list1).Reverse the order of the array using
                                # reversed_array[::-1].Convert the reversed numpy array back to a list using .tolist()
array1 = np.array(list1)
reversed_array = array1[::-1]
reversed_list = reversed_array.tolist()
print(reversed_list)






